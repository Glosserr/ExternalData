---
layout: layout.liquid
title: 11ty Boilerplate
---

<h1 class="title">External Data Demo</h1>
  
  <div class="container mx-auto p-4">
    
    <!-- First API Component -->
    <div x-data="firstApiData" class="API1 rounded-lg mb-8">
      <h2 class="text-2xl font-semibold mb-4">API Endpoint 1: Users</h2>
      
      <div x-show="loading" class="text-center p-4">
        <p>Loading data...</p>
      </div>
      
      <div x-show="!loading" class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <template x-for="item in data" :key="item.id">
          <div class="bg-white p-4 rounded shadow">
            <h3 x-text="item.name" class="font-bold"></h3>
            <p x-text="item.email" class="text-gray-600"></p>
          </div>
        </template>
      </div>
      
      <div x-show="error" class="bg-red-100 text-red-700 p-3 rounded mt-4">
        <p x-text="error"></p>
      </div>
    </div>
    
    <!-- Second API Component -->
    <div x-data="secondApiData" class="API2 rounded-lg">
      <h2 class="text-2xl font-semibold mb-4">API Endpoint 2: Posts</h2>
      
      <div x-show="loading" class="text-center p-4">
        <p>Loading data...</p>
      </div>
      
      <div x-show="!loading" class="space-y-3">
        <template x-for="item in data" :key="item.id">
          <div class="bg-white p-4 rounded shadow mb-3">
            <h3 x-text="item.title" class="font-bold"></h3>
            <p x-text="item.body" class="text-gray-600"></p>
          </div>
        </template>
      </div>
      
      <div x-show="error" class="bg-red-100 text-red-700 p-3 rounded mt-4">
        <p x-text="error"></p>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('alpine:init', () => {
      Alpine.data('firstApiData', () => ({
        data: [],
        loading: true,
        error: null,
        
        init() {
          this.fetchData();
        },
        
        async fetchData() {
          try {
            const response = await fetch('https://jsonplaceholder.typicode.com/users');
            if (!response.ok) throw new Error('Network response was not ok');
            this.data = await response.json();
            this.data = this.data.slice(0, 6); // Limit to first 6 items
          } catch (err) {
            this.error = `Error fetching data: ${err.message}`;
          } finally {
            this.loading = false;
          }
        }
      }));
      
      Alpine.data('secondApiData', () => ({
        data: [],
        loading: true,
        error: null,
        
        init() {
          this.fetchData();
        },
        
        async fetchData() {
          try {
            const response = await fetch('https://jsonplaceholder.typicode.com/posts');
            if (!response.ok) throw new Error('Network response was not ok');
            this.data = await response.json();
            this.data = this.data.slice(0, 5); // Limit to first 5 items
          } catch (err) {
            this.error = `Error fetching data: ${err.message}`;
          } finally {
            this.loading = false;
          }
        }
      }));
    });
  </script>